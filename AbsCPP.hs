-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module AbsCPP where

newtype Id = Id String
  deriving (Eq, Ord, Show, Read)

data Program = PDefs [Def]
  deriving (Eq, Ord, Show, Read)

data Def = DFun Type Id [Arg] [Stm] | DStruct Id [Field]
  deriving (Eq, Ord, Show, Read)

data Field = FDecl Type Id
  deriving (Eq, Ord, Show, Read)

data Arg = ADecl Type Id
  deriving (Eq, Ord, Show, Read)

data Stm
    = SExp Exp
    | SDecls Type [IdIn]
    | SReturn Exp
    | SReturnV
    | SWhile Exp Stm
    | SDoWhile Stm Exp
    | SFor Exp Exp Exp Stm
    | SBlock [Stm]
    | SIfElse Exp Stm Stm
  deriving (Eq, Ord, Show, Read)

data IdIn = IdNoInit Id | IdInit Id Exp
  deriving (Eq, Ord, Show, Read)

data Exp
    = ETrue
    | EFalse
    | EInt Integer
    | EDouble Double
    | EId Id
    | EApp Id [Exp]
    | EProj Exp Id
    | EPIncr Exp
    | EPDecr Exp
    | EIncr Exp
    | EDecr Exp
    | EUPlus Exp
    | EUMinus Exp
    | ETimes Exp Exp
    | EDiv Exp Exp
    | EPlus Exp Exp
    | EMinus Exp Exp
    | ETwc Exp Exp
    | ELt Exp Exp
    | EGt Exp Exp
    | ELtEq Exp Exp
    | EGtEq Exp Exp
    | EEq Exp Exp
    | ENEq Exp Exp
    | EAnd Exp Exp
    | EOr Exp Exp
    | EAss Exp Exp
    | ECond Exp Exp Exp
    | ETyped Exp Type
  deriving (Eq, Ord, Show, Read)

data Type
    = Type_bool | Type_int | Type_double | Type_void | TypeId Id
  deriving (Eq, Ord, Show, Read)

